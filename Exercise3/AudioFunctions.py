# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _AudioFunctions
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class AudioFunctions(_object):
    """Proxy of C++ AudioFunctions class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AudioFunctions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AudioFunctions, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self) -> AudioFunctions"""
        this = _AudioFunctions.new_AudioFunctions(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _AudioFunctions.delete_AudioFunctions
    __del__ = lambda self : None;
    def InitDirectShow(*args):
        """InitDirectShow(self)"""
        return _AudioFunctions.AudioFunctions_InitDirectShow(*args)

    def FreeDirectShow(*args):
        """FreeDirectShow(self)"""
        return _AudioFunctions.AudioFunctions_FreeDirectShow(*args)

    def OpenMedia(*args):
        """OpenMedia(self, wchar_t path)"""
        return _AudioFunctions.AudioFunctions_OpenMedia(*args)

    def PlayMedia(*args):
        """PlayMedia(self)"""
        return _AudioFunctions.AudioFunctions_PlayMedia(*args)

    def PauseMedia(*args):
        """PauseMedia(self)"""
        return _AudioFunctions.AudioFunctions_PauseMedia(*args)

    def StopMedia(*args):
        """StopMedia(self)"""
        return _AudioFunctions.AudioFunctions_StopMedia(*args)

    def GetCurrentState(*args):
        """GetCurrentState(self) -> int"""
        return _AudioFunctions.AudioFunctions_GetCurrentState(*args)

    def GetMediaPosition(*args):
        """GetMediaPosition(self) -> int"""
        return _AudioFunctions.AudioFunctions_GetMediaPosition(*args)

    def GetMediaDuration(*args):
        """GetMediaDuration(self) -> int"""
        return _AudioFunctions.AudioFunctions_GetMediaDuration(*args)

    def GetFilePath(*args):
        """GetFilePath(self) -> PyObject"""
        return _AudioFunctions.AudioFunctions_GetFilePath(*args)

    def SetVolume(*args):
        """SetVolume(self, double volume)"""
        return _AudioFunctions.AudioFunctions_SetVolume(*args)

    def SetMediaPosition(*args):
        """SetMediaPosition(self, double offset)"""
        return _AudioFunctions.AudioFunctions_SetMediaPosition(*args)

    def OpenFileDialog(*args):
        """OpenFileDialog(self) -> PyObject"""
        return _AudioFunctions.AudioFunctions_OpenFileDialog(*args)

    __swig_setmethods__["m_file_name"] = _AudioFunctions.AudioFunctions_m_file_name_set
    __swig_getmethods__["m_file_name"] = _AudioFunctions.AudioFunctions_m_file_name_get
    if _newclass:m_file_name = _swig_property(_AudioFunctions.AudioFunctions_m_file_name_get, _AudioFunctions.AudioFunctions_m_file_name_set)
    __swig_setmethods__["m_file_path"] = _AudioFunctions.AudioFunctions_m_file_path_set
    __swig_getmethods__["m_file_path"] = _AudioFunctions.AudioFunctions_m_file_path_get
    if _newclass:m_file_path = _swig_property(_AudioFunctions.AudioFunctions_m_file_path_get, _AudioFunctions.AudioFunctions_m_file_path_set)
AudioFunctions_swigregister = _AudioFunctions.AudioFunctions_swigregister
AudioFunctions_swigregister(AudioFunctions)



